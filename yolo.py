# -*- coding: utf-8 -*-
"""Yolo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1555fVaEVYpMUNaMyz8O8rVV141KjpQY-

#Identificador de objetos
Codigo utiliza do Yolo para identificar e demarcar objetos
"""

!pip install opencv-python-headless numpy

"""# Importa as bibliotecas
Tambem é necessario fazer o upload dos pesos e configurações:
yolov3.weights
yolov3.cfg
coco.names
"""

import cv2
import numpy as np
from google.colab.patches import cv2_imshow
from google.colab import files

# Carregar o modelo YOLO e os arquivos de configuração
net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")
with open("coco.names", "r") as f:
    classes = [line.strip() for line in f.readlines()]

layer_names = net.getLayerNames()
output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers()]


uploaded = files.upload()

for filename in uploaded.keys():
    # Abrir o vídeo
    cap = cv2.VideoCapture(filename)

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        height, width, _ = frame.shape

        # Preparar a imagem para o YOLO
        blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
        net.setInput(blob)
        outs = net.forward(output_layers)

        # Listas para armazenar detecções
        class_ids = []
        confidences = []
        boxes = []

        # Analisar as saídas
        for out in outs:
            for detection in out:
                scores = detection[5:]
                class_id = np.argmax(scores)
                confidence = scores[class_id]
                if confidence > 0.5:
                    # Obter as coordenadas da caixa delimitadora
                    center_x = int(detection[0] * width)
                    center_y = int(detection[1] * height)
                    w = int(detection[2] * width)
                    h = int(detection[3] * height)

                    # Coordenadas do canto superior esquerdo da caixa delimitadora
                    x = int(center_x - w / 2)
                    y = int(center_y - h / 2)

                    boxes.append([x, y, w, h])
                    confidences.append(float(confidence))
                    class_ids.append(class_id)

        # Aplicar Non-Maximum Suppression para remover caixas delimitadoras redundantes
        indexes = cv2.dnn.NMSBoxes(boxes, confidences, score_threshold=0.5, nms_threshold=0.4)

        # Desenhar as caixas delimitadoras e rótulos na imagem
        for i in range(len(boxes)):
            if i in indexes:
                x, y, w, h = boxes[i]
                label = str(classes[class_ids[i]])
                confidence = confidences[i]
                color = (0, 255, 0)
                cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
                cv2.putText(frame, f"{label}: {confidence:.2f}", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

        # Exibir o frame com as detecções
        cv2_imshow(frame)

    cap.release()

